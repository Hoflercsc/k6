import http from "k6/http";
import { sleep } from "k6";
import { check, group } from "k6";
import { Counter } from "k6/metrics";
import { Rate } from "k6/metrics";

/*
Note current api is not capable of walking through entire user experiance. 
A secured category book was created first through the UI. the purpose of this
test is to measure load ability of user download the
*/

export let options = {
  scenarios: {
    my_web_test: {
      executor: 'per-vu-iterations',
      vus: 25,
      maxDuration: '5m',
      gracefulStop: '0s', // do not wait for iterations to finish in the end
      tags: { test_type: 'website' }, // extra tags for the metrics generated by this scenario
      exec: 'webtest', // the function this scenario will execute
    },
  },
  
  thresholds: {
    //http_req_failed: ['rate<0.01'],   // http errors should be less than 1% 
    'http_req_failed{test_type:website}': ['rate<0.01'],
    'http_req_duration{test_type:website}': ['p(90)<200'], // 99% of requests must complete below 200
  },
};

export let errorRate = new Rate("errors");

export function webtest() {

    group("login get cookie", function () {

    let response = http.get('https://lab-load-testing.boardeffect.com/login');

    const form = response.submitForm({
    formSelector: 'form',
    fields: { "login[login]": 'boardeffect', "login[password]": 'password1' },
    });
    //console.log(JSON.stringify(form)); see if you get cookie data if you do code works
    console.log("login web form "+form.status)

    let jar = http.cookieJar();
    let cookies = jar.cookiesForURL('https://lab-load-testing.boardeffect.com');
    console.log(JSON.stringify(cookies));

    let success = check(form, {
      'status': (r) => r.status === 200,
      //'has session cookie': (r) => cookies._boardeffect_session !== undefined
    });
    errorRate.add(!success);
    
  });



}